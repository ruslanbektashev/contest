# Generated by Django 3.0.5 on 2020-05-04 07:44
import json
import os
import sys

from datetime import datetime

from django.conf import settings
from django.db import migrations


BACKUP_COMMENTS_PATH = 'additional_tools/comments_backup.json'


def backup_comments(apps, schema_editor):
    Comment = apps.get_model('accounts', 'Comment')

    MAX_OLD_ID = 10000
    existing_comments = []
    for comment in Comment.objects.all():
        thread_id = comment.thread_id + MAX_OLD_ID if comment.thread_id > 0 else comment.id + MAX_OLD_ID
        parent_id = comment.parent_id + MAX_OLD_ID if comment.parent_id > 0 else comment.id + MAX_OLD_ID
        existing_comments.append({
            'old_id': comment.id + MAX_OLD_ID,
            'author': comment.author.id,
            'thread_id': thread_id,
            'parent_id': parent_id,
            'level': comment.level,
            'order': comment.order,
            'object_type': comment.object_type.model,
            'object_id': comment.object_id,
            'text': comment.text,
            'is_deleted': comment.is_deleted,
            'date_created': [datetime.timestamp(comment.date_created), str(comment.date_created)],
        })
    existing_comments.sort(key=lambda x: x['date_created'][0], reverse=True)
    for i in range(len(existing_comments)):
        existing_comments[i]['date_created'] = existing_comments[i]['date_created'][1]
    s = json.dumps(existing_comments)
    file_path = os.path.join(settings.BASE_DIR, BACKUP_COMMENTS_PATH)
    with open(file_path, 'w') as file:
        file.write(s)


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0027_accounts_import'),
    ]

    operations = [
        migrations.RunPython(backup_comments, migrations.RunPython.noop, elidable=True)
    ] if 'test' not in sys.argv[1:] else []
