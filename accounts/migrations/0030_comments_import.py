# Generated by Django 3.0.5 on 2020-05-04 07:44

from django.db import migrations
import json
import os
from contest.settings import BASE_DIR


COMMENTS_PATH = 'additional_tools/comments.json'


def import_comments(apps, schema_editor):
    Account = apps.get_model('accounts', 'Account')
    Comment = apps.get_model('accounts', 'Comment')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    file_path = os.path.join(BASE_DIR, COMMENTS_PATH)
    with open(file_path) as file:
        s = file.read()
    comments = json.loads(s)
    new_comments = list()
    for comment in comments:
        if comment['object_type'] == 15:
            object_type = ContentType.objects.get(model='Course')
        elif comment['object_type'] == 14:
            object_type = ContentType.objects.get(model='Contest')
        else:
            object_type = ContentType.objects.get(model='Problem')
        new_comments.append(Comment(
            old_id=comment['old_id'],
            author=Account.objects.get(old_id=comment['author']).user,
            thread_id=comment['thread_id'],
            parent_id=comment['parent_id'],
            level=comment['level'],
            order=comment['order'],
            object_type=object_type,
            object_id=comment['object_id'],
            text=comment['text'],
            is_deleted=comment['is_deleted'],
            date_created=comment['date_created']
        ))
    new_comments = list(reversed(new_comments))
    Comment.objects.bulk_create(new_comments)

    comments = Comment.objects.all()
    for comment in comments:
        comment.thread_id = Comment.objects.get(old_id=comment.thread_id).id
        comment.parent_id = Comment.objects.get(old_id=comment.parent_id).id
    Comment.objects.bulk_update(comments, ['thread_id', 'parent_id'])


def delete_comments(apps, schema_editor):
    Comment = apps.get_model('accounts', 'Comment')

    file_path = os.path.join(BASE_DIR, COMMENTS_PATH)
    with open(file_path) as file:
        s = file.read()
    comments = json.loads(s)
    old_ids = list(map(lambda x: x['old_id'], comments))
    Comment.objects.filter(old_id__in=old_ids).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0029_accounts_import'),
    ]

    operations = [
        migrations.RunPython(import_comments, delete_comments)
    ]
