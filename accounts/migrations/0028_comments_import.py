# Generated by Django 3.0.5 on 2020-05-04 07:44

from django.db import migrations, models
import json
import os
from datetime import datetime
from contest.settings import BASE_DIR


COMMENTS_PATH = 'additional_tools/comments.json'
EXISTING_COMMENTS_PATH = 'additional_tools/existing_comments.json'


def import_comments(apps, schema_editor):
    Account = apps.get_model('accounts', 'Account')
    Comment = apps.get_model('accounts', 'Comment')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    comments_existed = False

    def create_comments_from_json(json_path):
        file_path = os.path.join(BASE_DIR, json_path)
        with open(file_path) as file:
            s = file.read()
        comments = json.loads(s)
        new_comments = list()
        for comment in comments:
            if json_path == COMMENTS_PATH:
                author = Account.objects.get(old_id=comment['author']).user
            else:
                author = Account.objects.get(user_id=comment['author']).user
            new_comments.append(Comment(
                old_id=comment['old_id'],
                author=author,
                thread_id=comment['thread_id'],
                parent_id=comment['parent_id'],
                level=comment['level'],
                order=comment['order'],
                object_type=ContentType.objects.get(model=comment['object_type']),
                object_id=comment['object_id'],
                text=comment['text'],
                is_deleted=comment['is_deleted'],
                date_created=comment['date_created']
            ))
        new_comments = list(reversed(new_comments))
        Comment.objects.bulk_create(new_comments)

    if Comment.objects.exists():
        comments_existed = True
        MAX_OLD_ID = 10000
        existing_comments = list()
        for comment in Comment.objects.all():
            existing_comments.append({
                'old_id': comment.id + MAX_OLD_ID,
                'author': comment.author.id,
                'thread_id': comment.thread_id + MAX_OLD_ID,
                'parent_id': comment.parent_id + MAX_OLD_ID,
                'level': comment.level,
                'order': comment.order,
                'object_type': comment.object_type.model,
                'object_id': comment.object_id,
                'text': comment.text,
                'is_deleted': comment.is_deleted,
                'date_created': [datetime.timestamp(comment.date_created), str(comment.date_created)],
            })
        existing_comments.sort(key=lambda x: x['date_created'][0], reverse=True)
        for i in range(len(existing_comments)):
            existing_comments[i]['date_created'] = existing_comments[i]['date_created'][1]
        s = json.dumps(existing_comments)
        file_path = os.path.join(BASE_DIR, EXISTING_COMMENTS_PATH)
        with open(file_path, 'w+') as file:
            file.write(s)
        Comment.objects.all().delete()

    create_comments_from_json(COMMENTS_PATH)
    if comments_existed:
        create_comments_from_json(EXISTING_COMMENTS_PATH)

    comments = Comment.objects.filter(old_id__isnull=False)
    for comment in comments:
        comment.thread_id = Comment.objects.get(old_id=comment.thread_id).id
        comment.parent_id = Comment.objects.get(old_id=comment.parent_id).id
    Comment.objects.bulk_update(comments, ['thread_id', 'parent_id'])


def delete_comments(apps, schema_editor):
    Comment = apps.get_model('accounts', 'Comment')

    file_path = os.path.join(BASE_DIR, COMMENTS_PATH)
    with open(file_path) as file:
        s = file.read()
    comments = json.loads(s)
    old_ids = list(map(lambda x: x['old_id'], comments))
    Comment.objects.filter(old_id__in=old_ids).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0027_accounts_import'),
    ]

    operations = [
        migrations.AlterField(
            model_name='comment',
            name='date_created',
            field=models.DateTimeField(auto_now_add=False, verbose_name='Дата создания'),
        ),
        migrations.RunPython(import_comments, delete_comments),
        migrations.AlterField(
            model_name='comment',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Дата создания'),
        ),
    ]
